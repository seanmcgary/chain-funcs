#!/usr/bin/env bash
set -e

# source in helper functions
source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"

# Check if required tools are available
ensureMake
ensureForge
ensureDocker

log "Building contracts..."
(cd .devkit/contracts && forge clean && forge build -- --include ../../contracts/**/*.sol && cd -) >&2

# Build the contracts and dependencies
log "Building AVS performer..."
BUILD_CONTAINER=true ./.hourglass/scripts/build.sh >&2

# Get the image name from build.yaml
IMAGE_NAME=$(yq eval '.container.image' .hourglass/build.yaml)
REGISTRY=$(yq eval '.container.registry' .hourglass/build.yaml)
VERSION=$(yq eval '.container.version' .hourglass/build.yaml)

LOCAL_IMAGE_NAME="${IMAGE_NAME}:${VERSION}"

# Get the docker image id
log "Getting docker image id..."
IMAGE_ID=$(docker inspect "$LOCAL_IMAGE_NAME" --format='{{.Id}}')

# If empty , log it 
if [ "$REGISTRY" == "null" ] || [ -z "$REGISTRY" ]; then
    log "Registry Url empty in .hourglass/build.yaml.Passing empty registry url to context. Provide registry url explicitly while calling `devkit avs release publish`"
    REGISTRY_URL=""
else
    REGISTRY_URL="${REGISTRY}"
fi

# Create and output the JSON structure
RESULT=$(jq -n \
    --arg component "performer" \
    --arg artifactId "$IMAGE_ID" \
    --arg digest "" \
    --arg registry "$REGISTRY_URL" \
    '{
        artifacts: {
            component: $component,
            artifactId: $artifactId,
            digest: $digest,
            registry_url: $registry
        }
    }')

# Print the JSON to stdout
echo "$RESULT" | jq -c .

log "Build completed successfully."
log "Updated artifacts field in context with image id: $IMAGE_ID"
