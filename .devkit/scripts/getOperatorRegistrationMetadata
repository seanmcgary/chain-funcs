#!/usr/bin/env bash
set -e

# source in helper functions
source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"

# Check if context parameter is provided
if [ -z "$1" ]; then
    log "Error: Missing context parameter"
    log "Usage: ./getOperatorRegistrationMetadata '{\"version\":\"0.0.1\",\"context\":{...}}'"
    exit 1
fi

# Parse the JSON context
CONTEXT="$1"

# Check for required tools
ensureJq
ensureYq
ensureCast

# Extract environment from context
ENVIRONMENT=$(echo "$CONTEXT" | jq -r '.context.name')

if [ "$ENVIRONMENT" == "null" ] || [ -z "$ENVIRONMENT" ]; then
    log "Error: Missing name (environment) in context"
    exit 1
fi

# Check if the template-specific AVS environment YAML file exists
ENVIRONMENT_YAML_FILE=".hourglass/context/${ENVIRONMENT}.yaml"
if [ ! -f "$ENVIRONMENT_YAML_FILE" ]; then
    log "Error: AVS environment file ${ENVIRONMENT_YAML_FILE} does not exist"
    exit 1
fi

# Get operators from context
OPERATORS_JSON=$(echo "$CONTEXT" | jq -c '.context.operators')
if [ "$OPERATORS_JSON" == "null" ] || [ -z "$OPERATORS_JSON" ]; then
    log "Error: No operators found in context"
    exit 1
fi

# Function to find an operator in the context by address
find_operator_in_context() {
    local address=$1
    echo "$OPERATORS_JSON" | jq -c ".[] | select(.address == \"$address\")"
}

# Initialize empty array for operator registration objects
OPERATOR_REGISTRATIONS='[]'

# Function to process operators of a specific type (aggregator or executor)
process_operators() {
    local operator_type="$1"
    
    log "Processing ${operator_type} operators..."
    
    # Get the operator set ID
    local set_id=$(yq -r ".${operator_type}.operatorSetId" "$ENVIRONMENT_YAML_FILE")
    if [ "$set_id" == "null" ]; then
        log "Error: Missing ${operator_type}.operatorSetId in ${ENVIRONMENT_YAML_FILE}"
        exit 1
    fi
    
    # Get the operators
    local operators=$(yq -o=json ".${operator_type}.operators" "$ENVIRONMENT_YAML_FILE")
    if [ -z "$operators" ]; then
        log "Error: No ${operator_type} operators found in ${ENVIRONMENT_YAML_FILE}"
        exit 1
    fi
    
    # Get the number of operators
    local operator_count=$(echo "$operators" | jq 'length')
    
    # Process each operator without using a pipe to while loop
    for ((i=0; i<operator_count; i++)); do
        local operator=$(echo "$operators" | jq -c ".[$i]")
        local operator_address=$(echo "$operator" | jq -r '.address')
        local operator_socket=$(echo "$operator" | jq -r '.socket')
        
        # Find operator details in context
        local context_operator=$(find_operator_in_context "$operator_address")
        if [ -z "$context_operator" ]; then
            log "Error: Operator $operator_address not found in context"
            exit 1
        fi
        
        log "Generating registration data for ${operator_type} operator: $operator_address"
        
        # Validate socket format before encoding
        if [ -z "$operator_socket" ] || [ "$operator_socket" == "null" ]; then
            log "Error: Invalid socket for operator $operator_address"
            exit 1
        fi
        
        # Use cast to ABI encode the socket string
        # Disable nightly warnings for cast
        set +e
        local registration_payload_with_prefix=$(FOUNDRY_DISABLE_NIGHTLY_WARNING=1 cast abi-encode "f(string)" "$operator_socket" 2>&1)
        CAST_EXIT_CODE=$?
        set -e
        
        # Check if the command was successful
        if [ $CAST_EXIT_CODE -ne 0 ]; then
            log ""
            log "Error encoding socket for operator $operator_address: $registration_payload_with_prefix"
            exit 1
        fi
        
        # Remove 0x prefix if present
        local registration_payload="${registration_payload_with_prefix#0x}"
        
        # Validate registration payload format - should be lowercase hex without 0x prefix
        if ! [[ "$registration_payload" =~ ^[0-9a-f]+$ ]]; then
            log "Error: Registration payload for operator $operator_address has invalid format."
            log "Expected a lowercase hexadecimal string without 0x prefix."
            log "Got: $registration_payload"
            exit 1
        fi
        
        # Create the operator registration object
        local registration_object=$(jq -n \
            --arg address "$operator_address" \
            --argjson operator_set_id "$set_id" \
            --arg payload "$registration_payload" \
            '{
                address: $address,
                operator_set_id: $operator_set_id,
                payload: $payload
            }')
        
        # Add to the list of registrations
        OPERATOR_REGISTRATIONS=$(echo "$OPERATOR_REGISTRATIONS" | jq ". + [$registration_object]")
    done
}

# Process both types of operators
process_operators "aggregator"
process_operators "executor"

# Check if we have any registrations
if [ "$(echo "$OPERATOR_REGISTRATIONS" | jq 'length')" -eq 0 ]; then
    log "Error: No operator registrations were generated"
    exit 1
fi

# Create the final JSON structure with operator_registrations key
RESULT=$(jq -n --argjson registrations "$OPERATOR_REGISTRATIONS" '{ operator_registrations: $registrations }')

# Print only the final JSON to stdout
echo "$RESULT" | jq -c . 
